
# Create your views here.
# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.shortcuts import render_to_response
from django.template import RequestContext, loader
from django.shortcuts import render
from django.contrib.auth.decorators import login_required, permission_required
from django.views.decorators.csrf import csrf_exempt
from login.lib.tools_view import ObjectListView, ObjectCreateView, ObjectDetailView, ObjectUpdateView, eliminarView, eliminarByPkView
from django.core.urlresolvers import reverse_lazy
from django.http import HttpResponse, HttpResponseRedirect
from django.http import Http404
from django.shortcuts import render
from django.contrib import messages
import simplejson as json
import datetime
from .models import *
from clientes.models import *
from .forms import *
from ambiente.models import *

from .tables import *
from .filters import *
from django.views.decorators.csrf import csrf_exempt
from inventario.models import *
from django.db import connection, transaction
from reunion.models import *
from config.models import *
from django.views.generic import TemplateView

from django.forms.extras.widgets import *
from django.contrib.auth import authenticate,login
#from login.lib.tools import Tools

#import ho.pisa as pisa #GAPH
from xhtml2pdf import pisa
import cStringIO as StringIO
import cgi #GAPH
from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse
from cgi import escape
from django.template.loader import render_to_string #GAPH

# -*- coding: utf-8 -*-
#from django.template import RequestContext


def generar_pdf(html):
    # Funci?n para generar el archivo PDF y devolverlo mediante HttpResponse
    result = StringIO.StringIO()
    pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("UTF-8")), result)
    if not pdf.err:
        return HttpResponse(result.getvalue(), mimetype='application/pdf')
    return HttpResponse('Error al generar el PDF: %s' % cgi.escape(html))

def libro_pdf(request, id):
    # vista de ejemplo con un hipot?tico modelo Libro
    #libro=get_object_or_404(Libro, id=id)
    html = render_to_string('pdf.html', {'pagesize':'A4'}, context_instance=RequestContext(request))
    return generar_pdf(html)

#======================PROFORMA=============================#

class ProformaListView(ObjectListView):
    model = Proforma
    paginate_by = 100
    template_name = 'proforma/index.html'
    table_class = ProformaTable
    filter_class = ProformaFilter
    context_object_name = 'reuniones'

    def get_context_data(self, **kwargs):
        context = super(ProformaListView, self).get_context_data(**kwargs)
        context['url_delete'] = reverse_lazy('proforma-delete')
        return context
class ConsultaProformaListView(ObjectListView):
    model = Proforma
    paginate_by = 100
    template_name = 'proforma/list.html'
    table_class = ProformaTable
    filter_class = ProformaFilter
    context_object_name = 'proformas'

    def get_context_data(self, **kwargs):
        context = super(ConsultaProformaListView, self).get_context_data(**kwargs)
        context['url_delete'] = reverse_lazy('proforma-delete')
        return context

def SeguimientoReuniones(request):
    cursor = connection.cursor();

    cursor.execute("SELECT  distinct reunion.codigo,reunion.motivo,reunion.fecha,reunion.tiempo_respuesta,proforma.codigo, proforma.fecha FROM reunion LEFT JOIN proforma ON proforma.reunion_codigo=reunion.codigo");
    row = cursor.fetchall();
    return render_to_response('proforma/seguimiento_reuniones.html', { 'row': row,},  RequestContext(request))



#=====================================================#
class ProformaDetailView(ObjectDetailView):
    model = Proforma
    template_name = 'proforma/detail.html'

#=====================================================#
def ProformaCreateView(request):
      if request.method == 'POST':
        proforma_form=ProformaForm(request.POST)
        productos = Producto.objects.all()
        ambientes = Ambiente.objects.all()


        if proforma_form.is_valid():
            new_orden=proforma_form.save()
            new_orden.created_by = request.user.get_full_name()
            new_orden.updated_by = request.user.get_full_name()
            new_orden.created_at = datetime.now()
            new_orden.updated_at = datetime.now()
            new_orden.total=request.POST["total"]
            new_orden.subtotal=request.POST["subtotal"]
            new_orden.descuento=request.POST["descuento"]
            new_orden.porcentaje_descuento=request.POST["porcentaje_descuento"]
            new_orden.iva=request.POST["iva"]
            new_orden.save()
            try:
                secuencial = Secuenciales.objects.get(modulo='proforma')
                secuencial.secuencial=secuencial.secuencial+1
                secuencial.created_by = request.user.get_full_name()
                secuencial.updated_by = request.user.get_full_name()
                secuencial.created_at = datetime.now()
                secuencial.updated_at = datetime.now()
                secuencial.save()
            except Secuenciales.DoesNotExist:
                secuencial = None

            contador=request.POST["columnas_receta"]
            print contador
            i=0
            while int(i)<=int(contador):
                i+= 1
                print('entro comoqw'+str(i))
                if int(i)> int(contador):
                    print('entrosd')
                    break
                else:
                    if 'id_kits'+str(i) in request.POST:
                        product=Producto.objects.get(producto_id=request.POST["id_kits"+str(i)])
                        ambiente=Ambiente.objects.get(id=request.POST["ambientes_kits"+str(i)])

                        proformadetalle=ProformaDetalle()
                        proformadetalle.proforma_id = new_orden.id
                        proformadetalle.producto_id=request.POST["id_kits"+str(i)]
                        proformadetalle.cantidad=request.POST["cantidad_kits"+str(i)]
                        proformadetalle.nombre=request.POST["nombre_kits"+str(i)]
                        proformadetalle.medida=request.POST["medida_kits"+str(i)]
                        proformadetalle.detalle=request.POST["detalle_kits"+str(i)]
                        if (len(request.POST["imagen_kits"+str(i)]))!=0:
                            print('prueba'+str(contador))

                            proformadetalle.imagen=request.FILES["imagen_kits"+str(i)]

                        proformadetalle.observaciones=request.POST["observacion_kits"+str(i)]

                        #kits.costo=float(request.POST["costo_kits1"])
                        proformadetalle.precio_compra=request.POST["costo_kits"+str(i)]
                        proformadetalle.total=request.POST["total_kits"+str(i)]
                        proformadetalle.almacen=request.POST.get('almacen_kits'+str(i), False)
                        proformadetalle.reparacion=request.POST.get('reparacion_kits'+str(i), False)
                        proformadetalle.save()
                
                print(i)
                print('contadorsd prueba'+str(contador))

            return HttpResponseRedirect('/proforma/consultarproforma')
        else:
            print 'error'
            print proforma_form.errors, len(proforma_form.errors)
      else:
        proforma_form=ProformaForm
        productos = Producto.objects.all()
        ambientes = Ambiente.objects.all()
        
      return render_to_response('proforma/create.html', { 'form': proforma_form,'productos':productos,'ambientes':ambientes},  RequestContext(request))


def ProformaCreateReunionView(request, pk):
      if request.method == 'POST':
        proforma_form=ProformaForm(request.POST)
        productos = Producto.objects.all()

        if proforma_form.is_valid():
            new_orden=proforma_form.save()
            new_orden.created_by = request.user.get_full_name()
            new_orden.updated_by = request.user.get_full_name()
            new_orden.created_at = datetime.now()
            new_orden.updated_at = datetime.now()
            new_orden.total=request.POST["total"]

            new_orden.save()
            try:
                secuencial = Secuenciales.objects.get(modulo='proforma')
                secuencial.secuencial=secuencial.secuencial+1
                secuencial.created_by = request.user.get_full_name()
                secuencial.updated_by = request.user.get_full_name()
                secuencial.created_at = datetime.now()
                secuencial.updated_at = datetime.now()
                secuencial.save()
            except Secuenciales.DoesNotExist:
                secuencial = None

            contador=request.POST["columnas_receta"]
            print contador
            i=0
            while int(i)<=int(contador):
                i+= 1
                print('entro comoqw'+str(i))
                if int(i)> int(contador):
                    print('entrosd')
                    break
                else:
                    if 'id_kits'+str(i) in request.POST:
                        product=Producto.objects.get(producto_id=request.POST["id_kits"+str(i)])
                        proformadetalle=ProformaDetalle()
                        proformadetalle.proforma_id = new_orden.id
                        proformadetalle.producto_id=request.POST["id_kits"+str(i)]
                        proformadetalle.cantidad=request.POST["cantidad_kits"+str(i)]
                        proformadetalle.nombre=request.POST["nombre_kits"+str(i)]
                        proformadetalle.medida=request.POST["medida_kits"+str(i)]

                        proformadetalle.imagen=request.POST["imagen_kits"+str(i)]

                        proformadetalle.observaciones=request.POST["observacion_kits"+str(i)]

                        #kits.costo=float(request.POST["costo_kits1"])
                        proformadetalle.precio_compra=request.POST["costo_kits"+str(i)]
                        proformadetalle.total=request.POST["total_kits"+str(i)]
                        proformadetalle.save()
                
                print(i)
                print('contadorsd prueba'+str(contador))

            return HttpResponseRedirect('/proforma/proforma')
        else:
            print 'error'
            print proforma_form.errors, len(proforma_form.errors)
      else:
        proforma_form=ProformaForm
        productos = Producto.objects.all()
        reunion = Reunion.objects.get(id=pk)

        
      return render_to_response('proforma/createreunion.html', { 'form': proforma_form,'productos':productos,'reunion':reunion},  RequestContext(request))


# class ProformaCreateView(ObjectCreateView):
#     model = Proforma
#     form_class = ProformaForm
#     template_name = 'proforma/create.html'
#     url_success = 'proforma-list'
#     url_success_other = 'proforma-create'
#     url_cancel = 'proforma-list'


#     def form_valid(self, form):
#         self.object = form.save(commit=False)
#         self.object.created_by = self.request.user
#         self.object.created_at = datetime.now()
#         self.object.updated_at = datetime.now()
#         self.object.save()

#         return super(ProformaCreateView, self).form_valid(form)

#     def get_success_url(self):
#         mensaje = "Ha ingresado 1 nueva proforma."
#         messages.success(self.request, mensaje)

#         if '_addanother' in self.request.POST and self.request.POST['_addanother']:
#             return reverse_lazy(self.url_success_other)
#         else:
#             return reverse_lazy(self.url_success)

#=====================================================#
class ProformaUpdateView(ObjectUpdateView):
    def get(self, request, *args, **kwargs):
        
        proforma = Proforma.objects.get(id=kwargs['pk'])
        productos = Producto.objects.all()
        ambientes = Ambiente.objects.all()

        proforma_form=ProformaForm(instance=proforma)  
        detalle = ProformaDetalle.objects.filter(proforma_id=proforma.id)

        context = {
        'section_title':'Actualizar Presupuesto',
        'button_text':'Actualizar',
        'form':proforma_form,
        'productos':productos,
        'ambientes':ambientes,
        'detalle':detalle
        }

        return render_to_response(
            'proforma/actualizar.html', context,context_instance=RequestContext(request))

    def post(sel, request, *args, **kwargs):
        proforma = Proforma.objects.get(id=kwargs['pk'])
        proforma_form = ProformaForm(request.POST,request.FILES,instance=proforma)
        p_id=kwargs['pk']
        print(p_id)
        print proforma_form.is_valid(), proforma_form.errors, type(proforma_form.errors)
        productos = Producto.objects.all()

        if proforma_form.is_valid() :
            
            proforma.save()

            new_orden=proforma.save()

            contador=request.POST["columnas_receta"]
           
            i=0
            while int(i) <= int(contador):
                i+= 1
                if int(i) > int(contador):
                    print('entrosd')
                    break
                else:
                    if 'id_kits'+str(i) in request.POST:
                        product=Producto.objects.get(producto_id=request.POST["id_kits"+str(i)])
                        detalle_id=request.POST["id_detalle"+str(i)]

                        if detalle_id:
                            detallecompra = ProformaDetalle.objects.get(id=detalle_id)
                            detallecompra.updated_by = request.user.get_full_name()
                            detallecompra.producto =product
                            detallecompra.cantidad=request.POST["cantidad_kits"+str(i)]
                            detallecompra.precio_compra=request.POST["costo_kits"+str(i)]
                            detallecompra.total=request.POST["total_kits"+str(i)]
                            #detallecompra.imagen=request.POST["imagen_kits"+str(i)]
                            detallecompra.observaciones=request.POST["observacion_kits"+str(i)]

                            #detallecompra.updated_at = datetime.now()
                            #detallecompra.recibido=request.POST.get("recibido_kits"+str(i), False)
                            detallecompra.save()
                            
                            print('Tiene detalle'+str(i))
                        else:
                            comprasdetalle=ProformaDetalle()
                            comprasdetalle.proforma_id = new_orden.id
                            comprasdetalle.producto=product
                            comprasdetalle.cantidad=request.POST["cantidad_kits"+str(i)]
                            comprasdetalle.precio_compra=request.POST["costo_kits"+str(i)]
                            comprasdetalle.total=request.POST["total_kits"+str(i)]
                            comprasdetalle.imagen=request.POST["imagen_kits"+str(i)]
                            comprasdetalle.observaciones=request.POST["observacion_kits"+str(i)]

                            comprasdetalle.save()
                            i+= 1
                            print('No Tiene detalle'+str(i))
                            print('contadorsd prueba'+str(contador))
            #ordencompra_form=OrdenCompraForm(request.POST)
            detalle = ProformaDetalle.objects.filter(proforma_id=p_id)
            productos = Producto.objects.all()
            ambientes = Ambiente.objects.all()

           
            context = {
           'section_title':'Actualizar Proforma',
            'button_text':'Actualizar',
            'form':proforma_form,
            'detalle':detalle,
            'productos':productos,
            'ambientes':ambientes,

            'mensaje':'Proforma actualizada con exito'}


            return render_to_response(
                'proforma/actualizar.html', 
                context,
                context_instance=RequestContext(request))
        else:
    
            proforma_form=ProformaForm(request.POST)
            detalle = ProformaDetalle.objects.filter(proforma_id=proforma.id)
            productos = Producto.objects.all()

            context = {
            'section_title':'Actualizar Proforma',
            'button_text':'Actualizar',
            'form':proforma_form,
            'detalle':detalle,
            'mensaje':'Proforma actualizada con exito'}

        return render_to_response(
            'proforma/actualizar.html', 
            context,
            context_instance=RequestContext(request))




#=====================================================#
@login_required()
def ProformaEliminarView(request):
    return eliminarView(request, Proforma, 'proforma-list')

#=====================================================#
@login_required()
def ProformaEliminarByPkView(request, pk):
    return eliminarByPkView(request, pk, Proforma)
#======================================================#
@login_required()
@csrf_exempt
def misProformaGuardar(request):
    item = {'exito':0}
    if request.method == 'POST':
        try:
           
            proformas = request.POST['data']
            proformas = json.loads(proformas)
           
            for proforma in proformas:
                if not proforma['codigo'] == "":
                    try:
                            a = Proforma()
                            a.created_by = request.user
                            a.updated_at = datetime.now()
                            a.save()
                       
                    except:
                        messages.error(request, "Oh, No se pudo guardar la proforma")
                        pass

                    item = {'exito':1}

            if item['exito'] == 1:
                messages.info(request, 'Proforma guardado!')

        except Exception as e:
            messages.error(request, "Oh por favor vuelva a intentarlo.")
            print e
            item = {'exito':0}
            pass

    return HttpResponse(json.dumps(item), content_type='application/json')

class ProformaRenderListView(ObjectListView):
    model = Proforma
    paginate_by = 100
    template_name = 'proforma/subir_render_list.html'
    table_class = ProformaTable
    filter_class = ProformaFilter
    context_object_name = 'proformas'

    def get_context_data(self, **kwargs):
        context = super(ProformaRenderListView, self).get_context_data(**kwargs)
        context['url_delete'] = reverse_lazy('proforma-delete')
        return context
class ProformaListAprobarView(ObjectListView):
    model = Proforma
    paginate_by = 100
    table_class = ProformaTable
    filter_class = ProformaFilter
    template_name = 'proforma/aprobada.html'
    context_object_name = 'proformas'

    def get_context_data(self, **kwargs):
        context = super(ProformaListAprobarView, self).get_context_data(**kwargs)
        context['url_delete'] = reverse_lazy('proforma-delete')
        return context
@login_required()
def ProformaAprobarByPkView(request, pk):

    objetos = Proforma.objects.filter(id= pk)
    for obj in objetos:
        obj.aprobada = True
        obj.save()
    
    return HttpResponseRedirect('/proforma/proformaAprobar')

